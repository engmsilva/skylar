{"version":3,"sources":["../node_modules/@babel/runtime/regenerator/index.js","../node_modules/regenerator-runtime/runtime.js","../node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js","../node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","../node_modules/react-hook-form/dist/react-hook-form.es.js"],"names":["module","exports","runtime","Op","Object","prototype","hasOwn","hasOwnProperty","$Symbol","Symbol","iteratorSymbol","iterator","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","wrap","innerFn","outerFn","self","tryLocsList","protoGenerator","Generator","generator","create","context","Context","_invoke","state","method","arg","Error","doneResult","delegate","delegateResult","maybeInvokeDelegate","ContinueSentinel","sent","_sent","dispatchException","abrupt","record","tryCatch","type","done","value","makeInvokeMethod","fn","obj","call","err","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","this","getProto","getPrototypeOf","NativeIteratorPrototype","values","Gp","defineIteratorMethods","forEach","AsyncIterator","previousPromise","callInvokeWithMethodAndArg","Promise","resolve","reject","invoke","result","__await","then","unwrapped","error","undefined","TypeError","info","resultName","next","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","iterable","iteratorMethod","isNaN","length","i","constructor","displayName","isGeneratorFunction","genFun","ctor","name","mark","setPrototypeOf","__proto__","awrap","async","iter","toString","keys","object","key","reverse","pop","skipTempReset","prev","charAt","slice","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","thrown","delegateYield","regeneratorRuntime","accidentalStrictMode","Function","asyncGeneratorStep","gen","_next","_throw","_asyncToGenerator","args","arguments","apply","_toConsumableArray","arr","Array","isArray","arr2","from","isUndefined","val","isNullOrUndefined","isObjectType","isObject","isHTMLElement","nodeType","Node","ELEMENT_NODE","VALIDATION_MODE","EVENTS","INPUT_VALIDATION_RULES","REGEX_IS_DEEP_PROP","REGEX_IS_PLAIN_PROP","REGEX_PROP_NAME","REGEX_ESCAPE_CHAR","attachEventListeners","field","handleChange","isRadioOrCheckbox","ref","addEventListener","isKey","test","stringToPath","string","replace","match","number","quote","set","path","index","tempPath","lastIndex","newValue","objValue","transformToNestObject","data","entries","reduce","previous","assign","get","defaultValue","split","filter","Boolean","focusErrorField","fields","fieldErrors","focus","options","removeAllEventListeners","validateWithStateUpdate","removeEventListener","isRadioInput","element","isCheckBoxInput","isDetached","HTMLElement","DOCUMENT_NODE","parentNode","findRemovedFieldAndRemoveListener","forceDelete","mutationWatcher","fieldValue","disconnect","splice","defaultReturn","isValid","getRadioValue","checked","isFileInput","isMultipleSelect","isEmptyString","defaultResult","validResult","getCheckboxValue","map","attributes","getFieldValue","files","selected","isString","getFieldsValues","search","output","isSearchString","isSearchArray","isNest","nest","startsWith","find","isEmptyObject","isSameError","types","message","objectA","objectB","compareObject","shouldUpdateWithError","errors","validFields","fieldsWithValidation","isFieldValid","isFormValid","currentFieldError","existFieldError","has","isManual","isRegex","RegExp","getValueAndMessage","validationData","isPureObject","isFunction","isBoolean","getValidateError","isStringValue","appendErrors","validateAllFieldCriteria","validateField","fieldsRef","a","required","maxLength","minLength","min","max","pattern","validate","current","isRadio","isCheckBox","isEmpty","appendErrorsCurry","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","requiredValue","requiredMessage","maxValue","maxMessage","minValue","minMessage","valueNumber","valueAsNumber","parseFloat","exceedMin","valueDate","valueAsDate","Date","maxLengthValue","minLengthValue","inputLength","patternValue","patternMessage","validateRef","validateError","validateFunctions","validateResult","validationResult","parseErrorSchema","inner","validateWithSchema","validationSchema","validationResolver","abortEarly","getDefaultValue","defaultValues","getPath","getInnerPath","pathWithIndex","isPrimitive","getPath$1","parentPath","flatArray","list","b","concat","assignWatchFields","fieldValues","fieldName","watchFields","combinedDefaultValues","watchFieldArray","add","skipValidation","hasError","isBlurEvent","isOnSubmit","isReValidateOnSubmit","isOnBlur","isReValidateOnBlur","isSubmitted","getFieldValueByName","results","getIsFieldsDifferent","referenceArray","differenceArray","isMatch","dataA","dataB","isMatchFieldArrayName","searchName","isNameInFieldArray","names","isFileListObject","FileList","onDomRemove","onDetachCallback","observer","MutationObserver","observe","window","document","childList","subtree","castPath","parent","updatePath","baseGet","array","start","end","baseSlice","unset","paths","baseUnset","modeChecker","mode","isOnChange","useRef","React","useState","useCallback","useEffect","useForm","reValidateMode","validationContext","submitFocusError","validateCriteriaMode","errorsRef","touchedFieldsRef","watchFieldArrayRef","watchFieldsRef","Set","dirtyFieldsRef","fieldsWithValidationRef","validFieldsRef","isValidRef","defaultRenderValuesRef","defaultValuesRef","isUnMount","isWatchAllRef","isSubmittedRef","isDirtyRef","submitCountRef","isSubmittingRef","handleChangeRef","resetFieldArrayFunctionRef","fieldArrayNamesRef","render","isWindowUndefined","shouldValidateCallback","isWeb","isProxyEnabled","readFormStateRef","dirty","dirtyFields","submitCount","touched","isSubmitting","reRender","shouldRenderBaseOnError","shouldRender","skipReRender","shouldReRender","delete","setFieldValue","rawValue","radioRef","selectRef","includes","checkboxRef","setDirty","isFieldArray","previousDirtyFieldsLength","size","isDirty","fieldArrayName","substring","indexOf","isDirtyChanged","setInternalValue","executeValidation","executeSchemaValidation","payload","previousFormIsValid","triggerValidation","all","every","isFieldWatched","preFixName","setValue","shouldValidate","target","currentError","shouldSkipValidation","shouldUpdateDirty","shouldUpdateState","validateSchemaIsValid","removeFieldEventListener","removeFieldEventListenerAndRef","clearError","setInternalError","preventRender","setError","watch","fieldNames","unregister","registerFieldsRef","validateOptions","console","warn","fieldAttributes","currentField","isEmptyDefaultValue","fieldToAttachListener","register","refOrValidationOptions","validationOptions","handleSubmit","callback","e","preventDefault","persist","resolvedPrevious","fieldError","resetRefs","closest","_a","resetFieldArray","getValues","formState","control","Proxy","prop","createContext"],"mappings":"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","file":"static/js/5.2c7b6b6d.chunk.js","sourcesContent":["module.exports = require(\"regenerator-runtime\");\n","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunctionPrototype[toStringTagSymbol] =\n    GeneratorFunction.displayName = \"GeneratorFunction\";\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      prototype[method] = function(arg) {\n        return this._invoke(method, arg);\n      };\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      if (!(toStringTagSymbol in genFun)) {\n        genFun[toStringTagSymbol] = \"GeneratorFunction\";\n      }\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return Promise.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return Promise.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new Promise(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList) {\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList)\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  Gp[toStringTagSymbol] = \"Generator\";\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n  typeof module === \"object\" ? module.exports : {}\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n}\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}","import arrayWithoutHoles from \"./arrayWithoutHoles\";\nimport iterableToArray from \"./iterableToArray\";\nimport nonIterableSpread from \"./nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || nonIterableSpread();\n}","export default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n}","export default function _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}","import * as React from 'react';\nimport { createContext, useContext, createElement, useState as useState$2, useRef as useRef$2, useEffect as useEffect$2, isValidElement, cloneElement, Fragment } from 'react';\n\nvar isUndefined = (val) => val === undefined;\n\nvar isNullOrUndefined = (value) => value === null || isUndefined(value);\n\nvar isArray = (value) => Array.isArray(value);\n\nconst isObjectType = (value) => typeof value === 'object';\r\nvar isObject = (value) => !isNullOrUndefined(value) && !isArray(value) && isObjectType(value);\n\nvar isHTMLElement = (value) => isObject(value) && value.nodeType === Node.ELEMENT_NODE;\n\nconst VALIDATION_MODE = {\r\n    onBlur: 'onBlur',\r\n    onChange: 'onChange',\r\n    onSubmit: 'onSubmit',\r\n};\r\nconst VALUE = 'value';\r\nconst UNDEFINED = 'undefined';\r\nconst EVENTS = {\r\n    BLUR: 'blur',\r\n    CHANGE: 'change',\r\n    INPUT: 'input',\r\n};\r\nconst INPUT_VALIDATION_RULES = {\r\n    max: 'max',\r\n    min: 'min',\r\n    maxLength: 'maxLength',\r\n    minLength: 'minLength',\r\n    pattern: 'pattern',\r\n    required: 'required',\r\n    validate: 'validate',\r\n};\r\nconst REGEX_IS_DEEP_PROP = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/;\r\nconst REGEX_IS_PLAIN_PROP = /^\\w*$/;\r\nconst REGEX_PROP_NAME = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g;\r\nconst REGEX_ESCAPE_CHAR = /\\\\(\\\\)?/g;\n\nfunction attachEventListeners({ field, handleChange, isRadioOrCheckbox, }) {\r\n    const { ref } = field;\r\n    if (isHTMLElement(ref) && ref.addEventListener && handleChange) {\r\n        ref.addEventListener(isRadioOrCheckbox ? EVENTS.CHANGE : EVENTS.INPUT, handleChange);\r\n        ref.addEventListener(EVENTS.BLUR, handleChange);\r\n    }\r\n}\n\nvar isKey = (value) => !isArray(value) &&\r\n    (REGEX_IS_PLAIN_PROP.test(value) || !REGEX_IS_DEEP_PROP.test(value));\n\nconst stringToPath = (string) => {\r\n    const result = [];\r\n    string.replace(REGEX_PROP_NAME, (match, number, quote, string) => {\r\n        result.push(quote ? string.replace(REGEX_ESCAPE_CHAR, '$1') : number || match);\r\n    });\r\n    return result;\r\n};\r\nfunction set(object, path, value) {\r\n    let index = -1;\r\n    const tempPath = isKey(path) ? [path] : stringToPath(path);\r\n    const length = tempPath.length;\r\n    const lastIndex = length - 1;\r\n    while (++index < length) {\r\n        const key = tempPath[index];\r\n        let newValue = value;\r\n        if (index !== lastIndex) {\r\n            const objValue = object[key];\r\n            newValue =\r\n                isObject(objValue) || isArray(objValue)\r\n                    ? objValue\r\n                    : !isNaN(tempPath[index + 1])\r\n                        ? []\r\n                        : {};\r\n        }\r\n        object[key] = newValue;\r\n        object = object[key];\r\n    }\r\n    return object;\r\n}\n\nvar transformToNestObject = (data) => Object.entries(data).reduce((previous, [key, value]) => {\r\n    if (!isKey(key)) {\r\n        set(previous, key, value);\r\n        return previous;\r\n    }\r\n    return Object.assign(Object.assign({}, previous), { [key]: value });\r\n}, {});\n\nvar get = (obj, path, defaultValue) => {\r\n    const result = path\r\n        .split(/[,[\\].]+?/)\r\n        .filter(Boolean)\r\n        .reduce((result, key) => (isNullOrUndefined(result) ? result : result[key]), obj);\r\n    return isUndefined(result) || result === obj\r\n        ? obj[path] || defaultValue\r\n        : result;\r\n};\n\nvar focusErrorField = (fields, fieldErrors) => {\r\n    for (const key in fields) {\r\n        if (get(fieldErrors, key)) {\r\n            const field = fields[key];\r\n            if (field) {\r\n                if (isHTMLElement(field.ref) && field.ref.focus) {\r\n                    field.ref.focus();\r\n                    break;\r\n                }\r\n                else if (field.options) {\r\n                    field.options[0].ref.focus();\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\n\nvar removeAllEventListeners = (ref, validateWithStateUpdate) => {\r\n    if (isHTMLElement(ref) && ref.removeEventListener) {\r\n        ref.removeEventListener(EVENTS.INPUT, validateWithStateUpdate);\r\n        ref.removeEventListener(EVENTS.CHANGE, validateWithStateUpdate);\r\n        ref.removeEventListener(EVENTS.BLUR, validateWithStateUpdate);\r\n    }\r\n};\n\nvar isRadioInput = (element) => !!element && element.type === 'radio';\n\nvar isCheckBoxInput = (element) => !!element && element.type === 'checkbox';\n\nfunction isDetached(element) {\r\n    if (!element) {\r\n        return true;\r\n    }\r\n    if (!(element instanceof HTMLElement) ||\r\n        element.nodeType === Node.DOCUMENT_NODE) {\r\n        return false;\r\n    }\r\n    return isDetached(element.parentNode);\r\n}\n\nfunction findRemovedFieldAndRemoveListener(fields, handleChange, field, forceDelete) {\r\n    if (!field) {\r\n        return;\r\n    }\r\n    const { ref, ref: { name, type }, mutationWatcher, } = field;\r\n    if (!type) {\r\n        delete fields[name];\r\n        return;\r\n    }\r\n    const fieldValue = fields[name];\r\n    if ((isRadioInput(ref) || isCheckBoxInput(ref)) && fieldValue) {\r\n        const { options } = fieldValue;\r\n        if (isArray(options) && options.length) {\r\n            options.forEach(({ ref, mutationWatcher }, index) => {\r\n                if ((ref && isDetached(ref)) || forceDelete) {\r\n                    removeAllEventListeners(ref, handleChange);\r\n                    if (mutationWatcher) {\r\n                        mutationWatcher.disconnect();\r\n                    }\r\n                    options.splice(index, 1);\r\n                }\r\n            });\r\n            if (options && !options.length) {\r\n                delete fields[name];\r\n            }\r\n        }\r\n        else {\r\n            delete fields[name];\r\n        }\r\n    }\r\n    else if (isDetached(ref) || forceDelete) {\r\n        removeAllEventListeners(ref, handleChange);\r\n        if (mutationWatcher) {\r\n            mutationWatcher.disconnect();\r\n        }\r\n        delete fields[name];\r\n    }\r\n}\n\nconst defaultReturn = {\r\n    isValid: false,\r\n    value: '',\r\n};\r\nvar getRadioValue = (options) => isArray(options)\r\n    ? options.reduce((previous, { ref: { checked, value } }) => checked\r\n        ? {\r\n            isValid: true,\r\n            value,\r\n        }\r\n        : previous, defaultReturn)\r\n    : defaultReturn;\n\nvar getMultipleSelectValue = (options) => [...options]\r\n    .filter(({ selected }) => selected)\r\n    .map(({ value }) => value);\n\nvar isFileInput = (element) => !!element && element.type === 'file';\n\nvar isMultipleSelect = (element) => !!element && element.type === 'select-multiple';\n\nvar isEmptyString = (value) => value === '';\n\nconst defaultResult = {\r\n    value: false,\r\n    isValid: false,\r\n};\r\nconst validResult = { value: true, isValid: true };\r\nvar getCheckboxValue = (options) => {\r\n    if (isArray(options)) {\r\n        if (options.length > 1) {\r\n            const values = options\r\n                .filter(({ ref: { checked } }) => checked)\r\n                .map(({ ref: { value } }) => value);\r\n            return { value: values, isValid: !!values.length };\r\n        }\r\n        const { checked, value, attributes } = options[0].ref;\r\n        return checked\r\n            ? attributes && !isUndefined(attributes.value)\r\n                ? isUndefined(value) || isEmptyString(value)\r\n                    ? validResult\r\n                    : { value: value, isValid: true }\r\n                : validResult\r\n            : defaultResult;\r\n    }\r\n    return defaultResult;\r\n};\n\nfunction getFieldValue(fields, ref) {\r\n    const { name, value } = ref;\r\n    const field = fields[name];\r\n    if (isFileInput(ref)) {\r\n        return ref.files;\r\n    }\r\n    if (isRadioInput(ref)) {\r\n        return field ? getRadioValue(field.options).value : '';\r\n    }\r\n    if (isMultipleSelect(ref)) {\r\n        return getMultipleSelectValue(ref.options);\r\n    }\r\n    if (isCheckBoxInput(ref)) {\r\n        return field ? getCheckboxValue(field.options).value : false;\r\n    }\r\n    return value;\r\n}\n\nvar isString = (value) => typeof value === 'string';\n\nvar getFieldsValues = (fields, search) => {\r\n    const output = {};\r\n    const isSearchString = isString(search);\r\n    const isSearchArray = isArray(search);\r\n    const isNest = search && search.nest;\r\n    for (const name in fields) {\r\n        if (isUndefined(search) ||\r\n            isNest ||\r\n            (isSearchString && name.startsWith(search)) ||\r\n            (isSearchArray &&\r\n                search.find((data) => name.startsWith(data)))) {\r\n            output[name] = getFieldValue(fields, fields[name].ref);\r\n        }\r\n    }\r\n    return output;\r\n};\n\nvar isEmptyObject = (value) => isObject(value) && !Object.keys(value).length;\n\nvar compareObject = (objectA = {}, objectB = {}) => Object.entries(objectA).reduce((previous, [key, value]) => previous ? objectB[key] && objectB[key] === value : false, true);\n\nvar isSameError = (error, { type, types, message, }) => {\r\n    return (isObject(error) &&\r\n        error.type === type &&\r\n        error.message === message &&\r\n        compareObject(error.types, types));\r\n};\n\nfunction shouldUpdateWithError({ errors, name, error, validFields, fieldsWithValidation, }) {\r\n    const isFieldValid = isEmptyObject(error);\r\n    const isFormValid = isEmptyObject(errors);\r\n    const currentFieldError = get(error, name);\r\n    const existFieldError = get(errors, name);\r\n    if ((isFieldValid && validFields.has(name)) ||\r\n        (existFieldError && existFieldError.isManual)) {\r\n        return false;\r\n    }\r\n    if (isFormValid !== isFieldValid ||\r\n        (!isFormValid && !existFieldError) ||\r\n        (isFieldValid && fieldsWithValidation.has(name) && !validFields.has(name))) {\r\n        return true;\r\n    }\r\n    return currentFieldError && !isSameError(existFieldError, currentFieldError);\r\n}\n\nvar isRegex = (value) => value instanceof RegExp;\n\nvar getValueAndMessage = (validationData) => {\r\n    const isPureObject = isObject(validationData) && !isRegex(validationData);\r\n    return {\r\n        value: isPureObject\r\n            ? validationData.value\r\n            : validationData,\r\n        message: isPureObject\r\n            ? validationData.message\r\n            : '',\r\n    };\r\n};\n\nvar isFunction = (value) => typeof value === 'function';\n\nvar isBoolean = (value) => typeof value === 'boolean';\n\nfunction getValidateError(result, ref, type = 'validate') {\r\n    const isStringValue = isString(result);\r\n    if (isStringValue || (isBoolean(result) && !result)) {\r\n        const message = isStringValue ? result : '';\r\n        return {\r\n            type,\r\n            message,\r\n            ref,\r\n        };\r\n    }\r\n}\n\nvar appendErrors = (name, validateAllFieldCriteria, errors, type, message) => {\r\n    if (!validateAllFieldCriteria) {\r\n        return {};\r\n    }\r\n    const error = errors[name];\r\n    return Object.assign(Object.assign({}, error), { types: Object.assign(Object.assign({}, (error && error.types ? error.types : {})), { [type]: message || true }) });\r\n};\n\nvar validateField = async (fieldsRef, validateAllFieldCriteria, { ref, ref: { type, value, name }, options, required, maxLength, minLength, min, max, pattern, validate, }) => {\r\n    const fields = fieldsRef.current;\r\n    const error = {};\r\n    const isRadio = isRadioInput(ref);\r\n    const isCheckBox = isCheckBoxInput(ref);\r\n    const isRadioOrCheckbox = isRadio || isCheckBox;\r\n    const isEmpty = isEmptyString(value);\r\n    const appendErrorsCurry = appendErrors.bind(null, name, validateAllFieldCriteria, error);\r\n    const getMinMaxMessage = (exceedMax, maxLengthMessage, minLengthMessage, maxType = INPUT_VALIDATION_RULES.maxLength, minType = INPUT_VALIDATION_RULES.minLength) => {\r\n        const message = exceedMax ? maxLengthMessage : minLengthMessage;\r\n        error[name] = Object.assign({ type: exceedMax ? maxType : minType, message,\r\n            ref }, (exceedMax\r\n            ? appendErrorsCurry(maxType, message)\r\n            : appendErrorsCurry(minType, message)));\r\n        if (!validateAllFieldCriteria) {\r\n            return error;\r\n        }\r\n    };\r\n    if (required &&\r\n        ((!isRadio && !isCheckBox && (isEmpty || isNullOrUndefined(value))) ||\r\n            (isBoolean(value) && !value) ||\r\n            (isCheckBox && !getCheckboxValue(options).isValid) ||\r\n            (isRadio && !getRadioValue(options).isValid))) {\r\n        const { value: requiredValue, message: requiredMessage } = isString(required)\r\n            ? { value: !!required, message: required }\r\n            : getValueAndMessage(required);\r\n        if (requiredValue) {\r\n            error[name] = Object.assign({ type: INPUT_VALIDATION_RULES.required, message: requiredMessage, ref: isRadioOrCheckbox ? fields[name].options[0].ref : ref }, appendErrorsCurry(INPUT_VALIDATION_RULES.required, requiredMessage));\r\n            if (!validateAllFieldCriteria) {\r\n                return error;\r\n            }\r\n        }\r\n    }\r\n    if (!isNullOrUndefined(min) || !isNullOrUndefined(max)) {\r\n        let exceedMax;\r\n        let exceedMin;\r\n        const { value: maxValue, message: maxMessage } = getValueAndMessage(max);\r\n        const { value: minValue, message: minMessage } = getValueAndMessage(min);\r\n        if (type === 'number' || (!type && !isNaN(value))) {\r\n            const valueNumber = ref.valueAsNumber || parseFloat(value);\r\n            if (!isNullOrUndefined(maxValue)) {\r\n                exceedMax = valueNumber > maxValue;\r\n            }\r\n            if (!isNullOrUndefined(minValue)) {\r\n                exceedMin = valueNumber < minValue;\r\n            }\r\n        }\r\n        else {\r\n            const valueDate = ref.valueAsDate || new Date(value);\r\n            if (isString(maxValue)) {\r\n                exceedMax = valueDate > new Date(maxValue);\r\n            }\r\n            if (isString(minValue)) {\r\n                exceedMin = valueDate < new Date(minValue);\r\n            }\r\n        }\r\n        if (exceedMax || exceedMin) {\r\n            getMinMaxMessage(!!exceedMax, maxMessage, minMessage, INPUT_VALIDATION_RULES.max, INPUT_VALIDATION_RULES.min);\r\n            if (!validateAllFieldCriteria) {\r\n                return error;\r\n            }\r\n        }\r\n    }\r\n    if (isString(value) && !isEmpty && (maxLength || minLength)) {\r\n        const { value: maxLengthValue, message: maxLengthMessage, } = getValueAndMessage(maxLength);\r\n        const { value: minLengthValue, message: minLengthMessage, } = getValueAndMessage(minLength);\r\n        const inputLength = value.toString().length;\r\n        const exceedMax = maxLength && inputLength > maxLengthValue;\r\n        const exceedMin = minLength && inputLength < minLengthValue;\r\n        if (exceedMax || exceedMin) {\r\n            getMinMaxMessage(!!exceedMax, maxLengthMessage, minLengthMessage);\r\n            if (!validateAllFieldCriteria) {\r\n                return error;\r\n            }\r\n        }\r\n    }\r\n    if (pattern && !isEmpty) {\r\n        const { value: patternValue, message: patternMessage } = getValueAndMessage(pattern);\r\n        if (isRegex(patternValue) && !patternValue.test(value)) {\r\n            error[name] = Object.assign({ type: INPUT_VALIDATION_RULES.pattern, message: patternMessage, ref }, appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, patternMessage));\r\n            if (!validateAllFieldCriteria) {\r\n                return error;\r\n            }\r\n        }\r\n    }\r\n    if (validate) {\r\n        const fieldValue = getFieldValue(fields, ref);\r\n        const validateRef = isRadioOrCheckbox && options ? options[0].ref : ref;\r\n        if (isFunction(validate)) {\r\n            const result = await validate(fieldValue);\r\n            const validateError = getValidateError(result, validateRef);\r\n            if (validateError) {\r\n                error[name] = Object.assign(Object.assign({}, validateError), appendErrorsCurry(INPUT_VALIDATION_RULES.validate, validateError.message));\r\n                if (!validateAllFieldCriteria) {\r\n                    return error;\r\n                }\r\n            }\r\n        }\r\n        else if (isObject(validate)) {\r\n            const validateFunctions = Object.entries(validate);\r\n            const validationResult = await new Promise((resolve) => {\r\n                validateFunctions.reduce(async (previous, [key, validate], index) => {\r\n                    if ((!isEmptyObject(await previous) && !validateAllFieldCriteria) ||\r\n                        !isFunction(validate)) {\r\n                        return resolve(previous);\r\n                    }\r\n                    let result;\r\n                    const validateResult = await validate(fieldValue);\r\n                    const validateError = getValidateError(validateResult, validateRef, key);\r\n                    if (validateError) {\r\n                        result = Object.assign(Object.assign({}, validateError), appendErrorsCurry(key, validateError.message));\r\n                        if (validateAllFieldCriteria) {\r\n                            error[name] = result;\r\n                        }\r\n                    }\r\n                    else {\r\n                        result = previous;\r\n                    }\r\n                    return validateFunctions.length - 1 === index\r\n                        ? resolve(result)\r\n                        : result;\r\n                }, {});\r\n            });\r\n            if (!isEmptyObject(validationResult)) {\r\n                error[name] = Object.assign({ ref: validateRef }, validationResult);\r\n                if (!validateAllFieldCriteria) {\r\n                    return error;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return error;\r\n};\n\nconst parseErrorSchema = (error, validateAllFieldCriteria) => isArray(error.inner)\r\n    ? error.inner.reduce((previous, { path, message, type }) => (Object.assign(Object.assign({}, previous), (previous[path] && validateAllFieldCriteria\r\n        ? {\r\n            [path]: appendErrors(path, validateAllFieldCriteria, previous, type, message),\r\n        }\r\n        : {\r\n            [path]: previous[path] || Object.assign({ message,\r\n                type }, (validateAllFieldCriteria\r\n                ? {\r\n                    types: { [type]: message || true },\r\n                }\r\n                : {})),\r\n        }))), {})\r\n    : {\r\n        [error.path]: { message: error.message, type: error.type },\r\n    };\r\nasync function validateWithSchema(validationSchema, validateAllFieldCriteria, data, validationResolver, context) {\r\n    if (validationResolver) {\r\n        return validationResolver(data, context);\r\n    }\r\n    try {\r\n        return {\r\n            values: await validationSchema.validate(data, {\r\n                abortEarly: false,\r\n                context,\r\n            }),\r\n            errors: {},\r\n        };\r\n    }\r\n    catch (e) {\r\n        return {\r\n            values: {},\r\n            errors: transformToNestObject(parseErrorSchema(e, validateAllFieldCriteria)),\r\n        };\r\n    }\r\n}\n\nvar getDefaultValue = (defaultValues, name, defaultValue) => isUndefined(defaultValues[name])\r\n    ? get(defaultValues, name, defaultValue)\r\n    : defaultValues[name];\n\nfunction flatArray(list) {\r\n    return list.reduce((a, b) => a.concat(isArray(b) ? flatArray(b) : b), []);\r\n}\n\nvar isPrimitive = (value) => isNullOrUndefined(value) || !isObjectType(value);\n\nconst getPath = (path, values) => {\r\n    const getInnerPath = (value, key, isObject) => {\r\n        const pathWithIndex = isObject ? `${path}.${key}` : `${path}[${key}]`;\r\n        return isPrimitive(value) ? pathWithIndex : getPath(pathWithIndex, value);\r\n    };\r\n    return isArray(values)\r\n        ? values.map((value, key) => getInnerPath(value, key))\r\n        : Object.entries(values).map(([key, value]) => getInnerPath(value, key, true));\r\n};\r\nvar getPath$1 = (parentPath, value) => flatArray(getPath(parentPath, value));\n\nvar assignWatchFields = (fieldValues, fieldName, watchFields, combinedDefaultValues, watchFieldArray) => {\r\n    let value;\r\n    watchFields.add(fieldName);\r\n    if (isEmptyObject(fieldValues)) {\r\n        value = watchFieldArray ? watchFieldArray : undefined;\r\n    }\r\n    else if (!isUndefined(fieldValues[fieldName])) {\r\n        value = fieldValues[fieldName];\r\n        watchFields.add(fieldName);\r\n    }\r\n    else {\r\n        value = get(transformToNestObject(fieldValues), fieldName);\r\n        if (isArray(watchFieldArray) &&\r\n            isArray(value) &&\r\n            value.length !== watchFieldArray.length) {\r\n            value = watchFieldArray;\r\n        }\r\n        if (!isUndefined(value)) {\r\n            getPath$1(fieldName, value).forEach(name => watchFields.add(name));\r\n        }\r\n    }\r\n    return isUndefined(value)\r\n        ? isObject(combinedDefaultValues)\r\n            ? getDefaultValue(combinedDefaultValues, fieldName)\r\n            : combinedDefaultValues\r\n        : value;\r\n};\n\nvar skipValidation = ({ hasError, isBlurEvent, isOnSubmit, isReValidateOnSubmit, isOnBlur, isReValidateOnBlur, isSubmitted, }) => (isOnSubmit && isReValidateOnSubmit) ||\r\n    (isOnSubmit && !isSubmitted) ||\r\n    (isOnBlur && !isBlurEvent && !hasError) ||\r\n    (isReValidateOnBlur && !isBlurEvent && hasError) ||\r\n    (isReValidateOnSubmit && isSubmitted);\n\nvar getFieldValueByName = (fields, name) => {\r\n    const results = transformToNestObject(getFieldsValues(fields));\r\n    return name ? get(results, name, results) : results;\r\n};\n\nfunction getIsFieldsDifferent(referenceArray, differenceArray) {\r\n    let isMatch = false;\r\n    if (!isArray(referenceArray) ||\r\n        !isArray(differenceArray) ||\r\n        referenceArray.length !== differenceArray.length) {\r\n        return true;\r\n    }\r\n    for (let i = 0; i < referenceArray.length; i++) {\r\n        if (isMatch) {\r\n            break;\r\n        }\r\n        const dataA = referenceArray[i];\r\n        const dataB = differenceArray[i];\r\n        if (isUndefined(dataB) ||\r\n            Object.keys(dataA).length !== Object.keys(dataB).length) {\r\n            isMatch = true;\r\n            break;\r\n        }\r\n        for (const key in dataA) {\r\n            if (dataA[key] !== dataB[key]) {\r\n                isMatch = true;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    return isMatch;\r\n}\n\nconst isMatchFieldArrayName = (name, searchName) => name.startsWith(`${searchName}[`);\r\nvar isNameInFieldArray = (names, name) => [...names].reduce((prev, current) => (isMatchFieldArrayName(name, current) ? true : prev), false);\n\nvar isFileListObject = (data) => typeof FileList !== UNDEFINED && data instanceof FileList;\n\nfunction onDomRemove(element, onDetachCallback) {\r\n    const observer = new MutationObserver(() => {\r\n        if (isDetached(element)) {\r\n            observer.disconnect();\r\n            onDetachCallback();\r\n        }\r\n    });\r\n    observer.observe(window.document, {\r\n        childList: true,\r\n        subtree: true,\r\n    });\r\n    return observer;\r\n}\n\nfunction castPath(value) {\r\n    return isArray(value) ? value : stringToPath(value);\r\n}\r\nfunction baseGet(object, path) {\r\n    const updatePath = isKey(path) ? [path] : castPath(path);\r\n    const length = path.length;\r\n    let index = 0;\r\n    while (index < length) {\r\n        object = isUndefined(object) ? index++ : object[updatePath[index++]];\r\n    }\r\n    return index == length ? object : undefined;\r\n}\r\nfunction baseSlice(array, start, end) {\r\n    let index = -1;\r\n    let length = array.length;\r\n    if (start < 0) {\r\n        start = -start > length ? 0 : length + start;\r\n    }\r\n    end = end > length ? length : end;\r\n    if (end < 0) {\r\n        end += length;\r\n    }\r\n    length = start > end ? 0 : end - start;\r\n    const result = Array(length);\r\n    while (++index < length) {\r\n        result[index] = array[index + start];\r\n    }\r\n    return result;\r\n}\r\nfunction parent(object, path) {\r\n    return path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));\r\n}\r\nfunction baseUnset(object, path) {\r\n    const updatePath = isKey(path) ? [path] : castPath(path);\r\n    object = parent(object, updatePath);\r\n    const key = updatePath[updatePath.length - 1];\r\n    return !(object != null) || delete object[key];\r\n}\r\nfunction unset(object, paths) {\r\n    paths.forEach(path => {\r\n        baseUnset(object, path);\r\n    });\r\n    return object;\r\n}\n\nvar modeChecker = (mode) => ({\r\n    isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\r\n    isOnBlur: mode === VALIDATION_MODE.onBlur,\r\n    isOnChange: mode === VALIDATION_MODE.onChange,\r\n});\n\nconst { useRef, useState, useCallback, useEffect } = React;\r\nfunction useForm({ mode = VALIDATION_MODE.onSubmit, reValidateMode = VALIDATION_MODE.onChange, validationSchema, validationResolver, validationContext, defaultValues = {}, submitFocusError = true, validateCriteriaMode, } = {}) {\r\n    const fieldsRef = useRef({});\r\n    const validateAllFieldCriteria = validateCriteriaMode === 'all';\r\n    const errorsRef = useRef({});\r\n    const touchedFieldsRef = useRef({});\r\n    const watchFieldArrayRef = useRef({});\r\n    const watchFieldsRef = useRef(new Set());\r\n    const dirtyFieldsRef = useRef(new Set());\r\n    const fieldsWithValidationRef = useRef(new Set());\r\n    const validFieldsRef = useRef(new Set());\r\n    const isValidRef = useRef(true);\r\n    const defaultRenderValuesRef = useRef({});\r\n    const defaultValuesRef = useRef(defaultValues);\r\n    const isUnMount = useRef(false);\r\n    const isWatchAllRef = useRef(false);\r\n    const isSubmittedRef = useRef(false);\r\n    const isDirtyRef = useRef(false);\r\n    const submitCountRef = useRef(0);\r\n    const isSubmittingRef = useRef(false);\r\n    const handleChangeRef = useRef();\r\n    const resetFieldArrayFunctionRef = useRef({});\r\n    const fieldArrayNamesRef = useRef(new Set());\r\n    const [, render] = useState();\r\n    const { isOnBlur, isOnSubmit } = useRef(modeChecker(mode)).current;\r\n    const isWindowUndefined = typeof window === UNDEFINED;\r\n    const shouldValidateCallback = !!(validationSchema || validationResolver);\r\n    const isWeb = typeof document !== UNDEFINED &&\r\n        !isWindowUndefined &&\r\n        !isUndefined(window.HTMLElement);\r\n    const isProxyEnabled = isWeb && 'Proxy' in window;\r\n    const readFormStateRef = useRef({\r\n        dirty: !isProxyEnabled,\r\n        dirtyFields: !isProxyEnabled,\r\n        isSubmitted: isOnSubmit,\r\n        submitCount: !isProxyEnabled,\r\n        touched: !isProxyEnabled,\r\n        isSubmitting: !isProxyEnabled,\r\n        isValid: !isProxyEnabled,\r\n    });\r\n    const { isOnBlur: isReValidateOnBlur, isOnSubmit: isReValidateOnSubmit, } = useRef(modeChecker(reValidateMode)).current;\r\n    const reRender = useCallback(() => {\r\n        if (!isUnMount.current) {\r\n            render({});\r\n        }\r\n    }, []);\r\n    const shouldRenderBaseOnError = useCallback((name, error, shouldRender, skipReRender) => {\r\n        let shouldReRender = shouldRender ||\r\n            shouldUpdateWithError({\r\n                errors: errorsRef.current,\r\n                error,\r\n                name,\r\n                validFields: validFieldsRef.current,\r\n                fieldsWithValidation: fieldsWithValidationRef.current,\r\n            });\r\n        if (isEmptyObject(error)) {\r\n            if (fieldsWithValidationRef.current.has(name) ||\r\n                shouldValidateCallback) {\r\n                validFieldsRef.current.add(name);\r\n                shouldReRender = shouldReRender || get(errorsRef.current, name);\r\n            }\r\n            errorsRef.current = unset(errorsRef.current, [name]);\r\n        }\r\n        else {\r\n            validFieldsRef.current.delete(name);\r\n            shouldReRender = shouldReRender || !get(errorsRef.current, name);\r\n            set(errorsRef.current, name, error[name]);\r\n        }\r\n        if (shouldReRender && !skipReRender) {\r\n            reRender();\r\n            return true;\r\n        }\r\n    }, [reRender, shouldValidateCallback]);\r\n    const setFieldValue = useCallback((name, rawValue) => {\r\n        const field = fieldsRef.current[name];\r\n        if (!field) {\r\n            return false;\r\n        }\r\n        const ref = field.ref;\r\n        const options = field.options;\r\n        const { type } = ref;\r\n        const value = isWeb && isHTMLElement(ref) && isNullOrUndefined(rawValue)\r\n            ? ''\r\n            : rawValue;\r\n        if (isRadioInput(ref) && options) {\r\n            options.forEach(({ ref: radioRef }) => (radioRef.checked = radioRef.value === value));\r\n        }\r\n        else if (isFileInput(ref)) {\r\n            if (isEmptyString(value) ||\r\n                isFileListObject(value)) {\r\n                ref.files = value;\r\n            }\r\n            else {\r\n                ref.value = value;\r\n            }\r\n        }\r\n        else if (isMultipleSelect(ref)) {\r\n            [...ref.options].forEach(selectRef => (selectRef.selected = value.includes(selectRef.value)));\r\n        }\r\n        else if (isCheckBoxInput(ref) && options) {\r\n            options.length > 1\r\n                ? options.forEach(({ ref: checkboxRef }) => (checkboxRef.checked = value.includes(checkboxRef.value)))\r\n                : (options[0].ref.checked = !!value);\r\n        }\r\n        else {\r\n            ref.value = value;\r\n        }\r\n        return !!type;\r\n    }, [isWeb]);\r\n    const setDirty = (name) => {\r\n        if (!fieldsRef.current[name] ||\r\n            (!readFormStateRef.current.dirty && !readFormStateRef.current.dirtyFields)) {\r\n            return false;\r\n        }\r\n        const isFieldArray = isNameInFieldArray(fieldArrayNamesRef.current, name);\r\n        const previousDirtyFieldsLength = dirtyFieldsRef.current.size;\r\n        let isDirty = defaultRenderValuesRef.current[name] !==\r\n            getFieldValue(fieldsRef.current, fieldsRef.current[name].ref);\r\n        if (isFieldArray) {\r\n            const fieldArrayName = name.substring(0, name.indexOf('['));\r\n            isDirty = getIsFieldsDifferent(getFieldValueByName(fieldsRef.current, fieldArrayName), get(defaultValuesRef.current, fieldArrayName));\r\n        }\r\n        const isDirtyChanged = (isFieldArray ? isDirtyRef.current : dirtyFieldsRef.current.has(name)) !==\r\n            isDirty;\r\n        if (isDirty) {\r\n            dirtyFieldsRef.current.add(name);\r\n        }\r\n        else {\r\n            dirtyFieldsRef.current.delete(name);\r\n        }\r\n        isDirtyRef.current = isFieldArray ? isDirty : !!dirtyFieldsRef.current.size;\r\n        return readFormStateRef.current.dirty\r\n            ? isDirtyChanged\r\n            : previousDirtyFieldsLength !== dirtyFieldsRef.current.size;\r\n    };\r\n    const setInternalValue = useCallback((name, value) => {\r\n        setFieldValue(name, value);\r\n        if (setDirty(name) ||\r\n            (!get(touchedFieldsRef.current, name) &&\r\n                readFormStateRef.current.touched)) {\r\n            return !!set(touchedFieldsRef.current, name, true);\r\n        }\r\n    }, [setFieldValue]);\r\n    const executeValidation = useCallback(async (name, skipReRender) => {\r\n        const field = fieldsRef.current[name];\r\n        if (!field) {\r\n            return false;\r\n        }\r\n        const error = await validateField(fieldsRef, validateAllFieldCriteria, field);\r\n        shouldRenderBaseOnError(name, error, false, skipReRender);\r\n        return isEmptyObject(error);\r\n    }, [shouldRenderBaseOnError, validateAllFieldCriteria]);\r\n    const executeSchemaValidation = useCallback(async (payload) => {\r\n        const { errors } = await validateWithSchema(validationSchema, validateAllFieldCriteria, getFieldValueByName(fieldsRef.current), validationResolver, validationContext);\r\n        const previousFormIsValid = isValidRef.current;\r\n        isValidRef.current = isEmptyObject(errors);\r\n        if (isArray(payload)) {\r\n            payload.forEach(name => {\r\n                const error = get(errors, name);\r\n                if (error) {\r\n                    set(errorsRef.current, name, error);\r\n                }\r\n                else {\r\n                    unset(errorsRef.current, [name]);\r\n                }\r\n            });\r\n            reRender();\r\n        }\r\n        else {\r\n            shouldRenderBaseOnError(payload, (get(errors, payload)\r\n                ? { [payload]: get(errors, payload) }\r\n                : {}), previousFormIsValid !== isValidRef.current);\r\n        }\r\n        return isEmptyObject(errorsRef.current);\r\n    }, [\r\n        reRender,\r\n        shouldRenderBaseOnError,\r\n        validateAllFieldCriteria,\r\n        validationContext,\r\n        validationResolver,\r\n        validationSchema,\r\n    ]);\r\n    const triggerValidation = useCallback(async (payload) => {\r\n        const fields = payload || Object.keys(fieldsRef.current);\r\n        if (shouldValidateCallback) {\r\n            return executeSchemaValidation(fields);\r\n        }\r\n        if (isArray(fields)) {\r\n            const result = await Promise.all(fields.map(async (data) => await executeValidation(data, true)));\r\n            reRender();\r\n            return result.every(Boolean);\r\n        }\r\n        return await executeValidation(fields);\r\n    }, [\r\n        executeSchemaValidation,\r\n        executeValidation,\r\n        reRender,\r\n        shouldValidateCallback,\r\n    ]);\r\n    const isFieldWatched = (name) => {\r\n        const preFixName = (name.match(/\\w+/) || [])[0];\r\n        return (isWatchAllRef.current ||\r\n            watchFieldsRef.current.has(name) ||\r\n            (watchFieldsRef.current.has(preFixName) &&\r\n                !isKey(name) &&\r\n                fieldArrayNamesRef.current.has(preFixName)));\r\n    };\r\n    const setValue = useCallback((name, value, shouldValidate) => {\r\n        const shouldRender = setInternalValue(name, value) || isFieldWatched(name);\r\n        if (shouldRender) {\r\n            reRender();\r\n        }\r\n        if (shouldValidate) {\r\n            triggerValidation(name);\r\n        }\r\n        return;\r\n    }, [reRender, setInternalValue, triggerValidation]);\r\n    handleChangeRef.current = handleChangeRef.current\r\n        ? handleChangeRef.current\r\n        : async ({ type, target }) => {\r\n            const name = target ? target.name : '';\r\n            const fields = fieldsRef.current;\r\n            const errors = errorsRef.current;\r\n            const field = fields[name];\r\n            const currentError = get(errors, name);\r\n            let error;\r\n            if (!field) {\r\n                return;\r\n            }\r\n            const isBlurEvent = type === EVENTS.BLUR;\r\n            const shouldSkipValidation = skipValidation({\r\n                hasError: !!currentError,\r\n                isBlurEvent,\r\n                isOnSubmit,\r\n                isReValidateOnSubmit,\r\n                isOnBlur,\r\n                isReValidateOnBlur,\r\n                isSubmitted: isSubmittedRef.current,\r\n            });\r\n            const shouldUpdateDirty = setDirty(name);\r\n            let shouldUpdateState = isFieldWatched(name) || shouldUpdateDirty;\r\n            if (isBlurEvent &&\r\n                !get(touchedFieldsRef.current, name) &&\r\n                readFormStateRef.current.touched) {\r\n                set(touchedFieldsRef.current, name, true);\r\n                shouldUpdateState = true;\r\n            }\r\n            if (shouldSkipValidation) {\r\n                return shouldUpdateState && reRender();\r\n            }\r\n            if (shouldValidateCallback) {\r\n                const { errors } = await validateWithSchema(validationSchema, validateAllFieldCriteria, getFieldValueByName(fields), validationResolver, validationContext);\r\n                const previousFormIsValid = isValidRef.current;\r\n                isValidRef.current = isEmptyObject(errors);\r\n                error = (get(errors, name)\r\n                    ? { [name]: get(errors, name) }\r\n                    : {});\r\n                if (previousFormIsValid !== isValidRef.current) {\r\n                    shouldUpdateState = true;\r\n                }\r\n            }\r\n            else {\r\n                error = await validateField(fieldsRef, validateAllFieldCriteria, field);\r\n            }\r\n            if (!shouldRenderBaseOnError(name, error) && shouldUpdateState) {\r\n                reRender();\r\n            }\r\n        };\r\n    const validateSchemaIsValid = useCallback((values = {}) => {\r\n        const fieldValues = isEmptyObject(defaultValuesRef.current)\r\n            ? getFieldsValues(fieldsRef.current)\r\n            : defaultValuesRef.current;\r\n        validateWithSchema(validationSchema, validateAllFieldCriteria, transformToNestObject(Object.assign(Object.assign({}, fieldValues), values)), validationResolver, validationContext).then(({ errors }) => {\r\n            const previousFormIsValid = isValidRef.current;\r\n            isValidRef.current = isEmptyObject(errors);\r\n            if (previousFormIsValid !== isValidRef.current) {\r\n                reRender();\r\n            }\r\n        });\r\n    }, \r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    [reRender, validateAllFieldCriteria, validationContext, validationResolver]);\r\n    const removeFieldEventListener = (field, forceDelete) => {\r\n        if (!isUndefined(handleChangeRef.current) && field) {\r\n            findRemovedFieldAndRemoveListener(fieldsRef.current, handleChangeRef.current, field, forceDelete);\r\n        }\r\n    };\r\n    const removeFieldEventListenerAndRef = useCallback((field, forceDelete) => {\r\n        if (!field ||\r\n            (field &&\r\n                isNameInFieldArray(fieldArrayNamesRef.current, field.ref.name) &&\r\n                !forceDelete)) {\r\n            return;\r\n        }\r\n        removeFieldEventListener(field, forceDelete);\r\n        const { name } = field.ref;\r\n        errorsRef.current = unset(errorsRef.current, [name]);\r\n        touchedFieldsRef.current = unset(touchedFieldsRef.current, [name]);\r\n        defaultRenderValuesRef.current = unset(defaultRenderValuesRef.current, [\r\n            name,\r\n        ]);\r\n        [\r\n            dirtyFieldsRef,\r\n            fieldsWithValidationRef,\r\n            validFieldsRef,\r\n            watchFieldsRef,\r\n        ].forEach(data => data.current.delete(name));\r\n        if (readFormStateRef.current.isValid ||\r\n            readFormStateRef.current.touched) {\r\n            reRender();\r\n            if (shouldValidateCallback) {\r\n                validateSchemaIsValid();\r\n            }\r\n        }\r\n    }, [reRender, shouldValidateCallback, validateSchemaIsValid]);\r\n    function clearError(name) {\r\n        if (isUndefined(name)) {\r\n            errorsRef.current = {};\r\n        }\r\n        else {\r\n            unset(errorsRef.current, isArray(name) ? name : [name]);\r\n        }\r\n        reRender();\r\n    }\r\n    const setInternalError = ({ name, type, types, message, preventRender, }) => {\r\n        const field = fieldsRef.current[name];\r\n        if (!isSameError(errorsRef.current[name], {\r\n            type,\r\n            message,\r\n            types,\r\n        })) {\r\n            set(errorsRef.current, name, {\r\n                type,\r\n                types,\r\n                message,\r\n                ref: field ? field.ref : {},\r\n                isManual: true,\r\n            });\r\n            if (!preventRender) {\r\n                reRender();\r\n            }\r\n        }\r\n    };\r\n    function setError(name, type = '', message) {\r\n        if (isString(name)) {\r\n            setInternalError(Object.assign({ name }, (isObject(type)\r\n                ? {\r\n                    types: type,\r\n                    type: '',\r\n                }\r\n                : {\r\n                    type,\r\n                    message,\r\n                })));\r\n        }\r\n        else if (isArray(name)) {\r\n            name.forEach(error => setInternalError(Object.assign(Object.assign({}, error), { preventRender: true })));\r\n            reRender();\r\n        }\r\n    }\r\n    function watch(fieldNames, defaultValue) {\r\n        const combinedDefaultValues = isUndefined(defaultValue)\r\n            ? isUndefined(defaultValuesRef.current)\r\n                ? {}\r\n                : defaultValuesRef.current\r\n            : defaultValue;\r\n        const fieldValues = getFieldsValues(fieldsRef.current, fieldNames);\r\n        const watchFields = watchFieldsRef.current;\r\n        if (isProxyEnabled) {\r\n            readFormStateRef.current.dirty = true;\r\n        }\r\n        if (isString(fieldNames)) {\r\n            return assignWatchFields(fieldValues, fieldNames, watchFields, combinedDefaultValues, fieldArrayNamesRef.current.has(fieldNames)\r\n                ? watchFieldArrayRef.current[fieldNames]\r\n                : undefined);\r\n        }\r\n        if (isArray(fieldNames)) {\r\n            return fieldNames.reduce((previous, name) => {\r\n                let value;\r\n                if (isEmptyObject(fieldsRef.current) &&\r\n                    isObject(combinedDefaultValues)) {\r\n                    value = getDefaultValue(combinedDefaultValues, name);\r\n                }\r\n                else {\r\n                    value = assignWatchFields(fieldValues, name, watchFields, combinedDefaultValues);\r\n                }\r\n                return Object.assign(Object.assign({}, previous), { [name]: value });\r\n            }, {});\r\n        }\r\n        isWatchAllRef.current = true;\r\n        const result = (!isEmptyObject(fieldValues) && fieldValues) ||\r\n            defaultValue ||\r\n            defaultValuesRef.current;\r\n        return fieldNames && fieldNames.nest\r\n            ? transformToNestObject(result)\r\n            : result;\r\n    }\r\n    function unregister(names) {\r\n        if (!isEmptyObject(fieldsRef.current)) {\r\n            (isArray(names) ? names : [names]).forEach(fieldName => removeFieldEventListenerAndRef(fieldsRef.current[fieldName], true));\r\n        }\r\n    }\r\n    function registerFieldsRef(ref, validateOptions = {}) {\r\n        if (!ref.name) {\r\n            // eslint-disable-next-line no-console\r\n            return console.warn('Missing name @', ref);\r\n        }\r\n        const { name, type, value } = ref;\r\n        const fieldAttributes = Object.assign({ ref }, validateOptions);\r\n        const fields = fieldsRef.current;\r\n        const isRadioOrCheckbox = isRadioInput(ref) || isCheckBoxInput(ref);\r\n        let currentField = fields[name];\r\n        let isEmptyDefaultValue = true;\r\n        let isFieldArray = false;\r\n        let defaultValue;\r\n        if (isRadioOrCheckbox\r\n            ? currentField &&\r\n                isArray(currentField.options) &&\r\n                currentField.options.find(({ ref }) => value === ref.value)\r\n            : currentField) {\r\n            fields[name] = Object.assign(Object.assign({}, currentField), validateOptions);\r\n            return;\r\n        }\r\n        if (type) {\r\n            const mutationWatcher = onDomRemove(ref, () => removeFieldEventListenerAndRef(fieldAttributes));\r\n            currentField = isRadioOrCheckbox\r\n                ? Object.assign({ options: [\r\n                        ...((currentField && currentField.options) || []),\r\n                        {\r\n                            ref,\r\n                            mutationWatcher,\r\n                        },\r\n                    ], ref: { type, name } }, validateOptions) : Object.assign(Object.assign({}, fieldAttributes), { mutationWatcher });\r\n        }\r\n        else {\r\n            currentField = fieldAttributes;\r\n        }\r\n        fields[name] = currentField;\r\n        if (!isEmptyObject(defaultValuesRef.current)) {\r\n            defaultValue = getDefaultValue(defaultValuesRef.current, name);\r\n            isEmptyDefaultValue = isUndefined(defaultValue);\r\n            isFieldArray = isNameInFieldArray(fieldArrayNamesRef.current, name);\r\n            if (!isEmptyDefaultValue && !isFieldArray) {\r\n                setFieldValue(name, defaultValue);\r\n            }\r\n        }\r\n        if (shouldValidateCallback &&\r\n            !isFieldArray &&\r\n            readFormStateRef.current.isValid) {\r\n            validateSchemaIsValid();\r\n        }\r\n        else if (!isEmptyObject(validateOptions)) {\r\n            fieldsWithValidationRef.current.add(name);\r\n            if (!isOnSubmit && readFormStateRef.current.isValid) {\r\n                validateField(fieldsRef, validateAllFieldCriteria, currentField).then(error => {\r\n                    const previousFormIsValid = isValidRef.current;\r\n                    if (isEmptyObject(error)) {\r\n                        validFieldsRef.current.add(name);\r\n                    }\r\n                    else {\r\n                        isValidRef.current = false;\r\n                    }\r\n                    if (previousFormIsValid !== isValidRef.current) {\r\n                        reRender();\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        if (!defaultRenderValuesRef.current[name] &&\r\n            !(isFieldArray && isEmptyDefaultValue)) {\r\n            defaultRenderValuesRef.current[name] = isEmptyDefaultValue\r\n                ? getFieldValue(fields, currentField.ref)\r\n                : defaultValue;\r\n        }\r\n        if (!type) {\r\n            return;\r\n        }\r\n        const fieldToAttachListener = isRadioOrCheckbox && currentField.options\r\n            ? currentField.options[currentField.options.length - 1]\r\n            : currentField;\r\n        attachEventListeners({\r\n            field: fieldToAttachListener,\r\n            isRadioOrCheckbox,\r\n            handleChange: handleChangeRef.current,\r\n        });\r\n    }\r\n    function register(refOrValidationOptions, validationOptions) {\r\n        if (isWindowUndefined) {\r\n            return;\r\n        }\r\n        if (isString(refOrValidationOptions)) {\r\n            registerFieldsRef({ name: refOrValidationOptions }, validationOptions);\r\n            return;\r\n        }\r\n        if (isObject(refOrValidationOptions) && 'name' in refOrValidationOptions) {\r\n            registerFieldsRef(refOrValidationOptions, validationOptions);\r\n            return;\r\n        }\r\n        return (ref) => ref && registerFieldsRef(ref, refOrValidationOptions);\r\n    }\r\n    const handleSubmit = useCallback((callback) => async (e) => {\r\n        if (e) {\r\n            e.preventDefault();\r\n            e.persist();\r\n        }\r\n        let fieldErrors;\r\n        let fieldValues;\r\n        const fields = fieldsRef.current;\r\n        if (readFormStateRef.current.isSubmitting) {\r\n            isSubmittingRef.current = true;\r\n            reRender();\r\n        }\r\n        try {\r\n            if (shouldValidateCallback) {\r\n                fieldValues = getFieldsValues(fields);\r\n                const { errors, values } = await validateWithSchema(validationSchema, validateAllFieldCriteria, transformToNestObject(fieldValues), validationResolver, validationContext);\r\n                errorsRef.current = errors;\r\n                fieldErrors = errors;\r\n                fieldValues = values;\r\n            }\r\n            else {\r\n                const { errors, values, } = await Object.values(fields).reduce(async (previous, field) => {\r\n                    if (!field) {\r\n                        return previous;\r\n                    }\r\n                    const resolvedPrevious = await previous;\r\n                    const { ref, ref: { name }, } = field;\r\n                    if (!fields[name]) {\r\n                        return Promise.resolve(resolvedPrevious);\r\n                    }\r\n                    const fieldError = await validateField(fieldsRef, validateAllFieldCriteria, field);\r\n                    if (fieldError[name]) {\r\n                        set(resolvedPrevious.errors, name, fieldError[name]);\r\n                        validFieldsRef.current.delete(name);\r\n                        return Promise.resolve(resolvedPrevious);\r\n                    }\r\n                    if (fieldsWithValidationRef.current.has(name)) {\r\n                        validFieldsRef.current.add(name);\r\n                    }\r\n                    resolvedPrevious.values[name] = getFieldValue(fields, ref);\r\n                    return Promise.resolve(resolvedPrevious);\r\n                }, Promise.resolve({\r\n                    errors: {},\r\n                    values: {},\r\n                }));\r\n                fieldErrors = errors;\r\n                fieldValues = values;\r\n            }\r\n            if (isEmptyObject(fieldErrors)) {\r\n                errorsRef.current = {};\r\n                await callback(transformToNestObject(fieldValues), e);\r\n            }\r\n            else {\r\n                if (submitFocusError && isWeb) {\r\n                    focusErrorField(fields, fieldErrors);\r\n                }\r\n                errorsRef.current = fieldErrors;\r\n            }\r\n        }\r\n        finally {\r\n            isSubmittedRef.current = true;\r\n            isSubmittingRef.current = false;\r\n            submitCountRef.current = submitCountRef.current + 1;\r\n            reRender();\r\n        }\r\n    }, [\r\n        isWeb,\r\n        reRender,\r\n        shouldValidateCallback,\r\n        submitFocusError,\r\n        validateAllFieldCriteria,\r\n        validationContext,\r\n        validationResolver,\r\n        validationSchema,\r\n    ]);\r\n    const resetRefs = () => {\r\n        errorsRef.current = {};\r\n        fieldsRef.current = {};\r\n        touchedFieldsRef.current = {};\r\n        validFieldsRef.current = new Set();\r\n        fieldsWithValidationRef.current = new Set();\r\n        defaultRenderValuesRef.current = {};\r\n        watchFieldsRef.current = new Set();\r\n        dirtyFieldsRef.current = new Set();\r\n        isWatchAllRef.current = false;\r\n        isSubmittedRef.current = false;\r\n        isDirtyRef.current = false;\r\n        isValidRef.current = true;\r\n        submitCountRef.current = 0;\r\n    };\r\n    const reset = (values) => {\r\n        if (isWeb) {\r\n            for (const value of Object.values(fieldsRef.current)) {\r\n                if (value && isHTMLElement(value.ref) && value.ref.closest) {\r\n                    try {\r\n                        value.ref.closest('form').reset();\r\n                        break;\r\n                    }\r\n                    catch (_a) { }\r\n                }\r\n            }\r\n        }\r\n        if (values) {\r\n            defaultValuesRef.current = values;\r\n        }\r\n        Object.values(resetFieldArrayFunctionRef.current).forEach(resetFieldArray => isFunction(resetFieldArray) && resetFieldArray());\r\n        resetRefs();\r\n        reRender();\r\n    };\r\n    const getValues = (payload) => {\r\n        const fieldValues = getFieldsValues(fieldsRef.current);\r\n        return payload && payload.nest\r\n            ? transformToNestObject(fieldValues)\r\n            : fieldValues;\r\n    };\r\n    useEffect(() => () => {\r\n        isUnMount.current = true;\r\n        fieldsRef.current &&\r\n            Object.values(fieldsRef.current).forEach((field) => removeFieldEventListenerAndRef(field, true));\r\n    }, [removeFieldEventListenerAndRef]);\r\n    if (!shouldValidateCallback) {\r\n        isValidRef.current =\r\n            validFieldsRef.current.size >= fieldsWithValidationRef.current.size &&\r\n                isEmptyObject(errorsRef.current);\r\n    }\r\n    const formState = {\r\n        dirty: isDirtyRef.current,\r\n        dirtyFields: dirtyFieldsRef.current,\r\n        isSubmitted: isSubmittedRef.current,\r\n        submitCount: submitCountRef.current,\r\n        touched: touchedFieldsRef.current,\r\n        isSubmitting: isSubmittingRef.current,\r\n        isValid: isOnSubmit\r\n            ? isSubmittedRef.current && isEmptyObject(errorsRef.current)\r\n            : isValidRef.current,\r\n    };\r\n    const control = Object.assign(Object.assign({ register,\r\n        unregister,\r\n        removeFieldEventListener,\r\n        getValues,\r\n        setValue,\r\n        triggerValidation }, (shouldValidateCallback ? { validateSchemaIsValid } : {})), { formState, mode: {\r\n            isOnBlur,\r\n            isOnSubmit,\r\n        }, reValidateMode: {\r\n            isReValidateOnBlur,\r\n            isReValidateOnSubmit,\r\n        }, errorsRef,\r\n        touchedFieldsRef,\r\n        fieldsRef,\r\n        resetFieldArrayFunctionRef,\r\n        validFieldsRef,\r\n        fieldsWithValidationRef,\r\n        watchFieldArrayRef,\r\n        fieldArrayNamesRef,\r\n        isDirtyRef,\r\n        readFormStateRef,\r\n        defaultValuesRef });\r\n    return {\r\n        watch,\r\n        control,\r\n        handleSubmit,\r\n        setValue,\r\n        triggerValidation,\r\n        getValues: useCallback(getValues, []),\r\n        reset: useCallback(reset, []),\r\n        register: useCallback(register, [\r\n            defaultValuesRef.current,\r\n            defaultRenderValuesRef.current,\r\n        ]),\r\n        unregister: useCallback(unregister, []),\r\n        clearError: useCallback(clearError, []),\r\n        setError: useCallback(setError, []),\r\n        errors: errorsRef.current,\r\n        formState: isProxyEnabled\r\n            ? new Proxy(formState, {\r\n                get: (obj, prop) => {\r\n                    if (prop in obj) {\r\n                        readFormStateRef.current[prop] = true;\r\n                        return obj[prop];\r\n                    }\r\n                    return {};\r\n                },\r\n            })\r\n            : formState,\r\n    };\r\n}\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n\r\nfunction __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\n\nconst FormGlobalContext = createContext(null);\r\nfunction useFormContext() {\r\n    const context = useContext(FormGlobalContext);\r\n    if (!isUndefined(context))\r\n        return context;\r\n    throw new Error('Missing FormContext');\r\n}\r\nfunction FormContext(_a) {\r\n    var { children, formState, errors } = _a, restMethods = __rest(_a, [\"children\", \"formState\", \"errors\"]);\r\n    return (createElement(FormGlobalContext.Provider, { value: Object.assign(Object.assign({}, restMethods), { formState, errors }) }, children));\r\n}\n\nvar generateId = () => {\r\n    const d = typeof performance === UNDEFINED ? Date.now() : performance.now() * 1000;\r\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\r\n        const r = (Math.random() * 16 + d) % 16 | 0;\r\n        return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);\r\n    });\r\n};\n\nconst appendId = (value, keyName) => (Object.assign(Object.assign({}, (isObject(value) ? value : { value })), { [keyName]: generateId() }));\r\nconst mapIds = (data, keyName) => (isArray(data) ? data : []).map(value => appendId(value, keyName));\n\nvar removeArrayAt = (data, index) => isUndefined(index)\r\n    ? []\r\n    : data.filter((_, i) => (isArray(index) ? index : [index]).indexOf(i) < 0);\n\nvar moveArrayAt = (data, from, to) => isArray(data) ? data.splice(to, 0, data.splice(from, 1)[0]) : [];\n\nvar swapArrayAt = (fields, indexA, indexB) => isArray(fields) &&\r\n    ([fields[indexA], fields[indexB]] = [fields[indexB], fields[indexA]]);\n\nvar prependAt = (data, value) => [\r\n    ...(isArray(value) ? value : [value || null]),\r\n    ...data,\r\n];\n\nvar insertAt = (data, index, value) => [\r\n    ...data.slice(0, index),\r\n    ...(isArray(value) ? value : [value || null]),\r\n    ...data.slice(index),\r\n];\n\nvar fillEmptyArray = (value) => isArray(value) ? Array(value.length).fill(null) : undefined;\n\nconst { useEffect: useEffect$1, useRef: useRef$1, useState: useState$1 } = React;\r\nconst useFieldArray = ({ control, name, keyName = 'id', }) => {\r\n    const methods = useFormContext();\r\n    const { resetFieldArrayFunctionRef, fieldArrayNamesRef, fieldsRef, getValues, defaultValuesRef, removeFieldEventListener, errorsRef, isDirtyRef, touchedFieldsRef, readFormStateRef, watchFieldArrayRef, validFieldsRef, fieldsWithValidationRef, validateSchemaIsValid, } = control || methods.control;\r\n    const memoizedDefaultValues = useRef$1(get(defaultValuesRef.current, name, []));\r\n    const [fields, setField] = useState$1(mapIds(memoizedDefaultValues.current, keyName));\r\n    const appendValueWithKey = (value) => value.map((v) => appendId(v, keyName));\r\n    const commonTasks = (fieldsValues) => {\r\n        watchFieldArrayRef.current[name] = fieldsValues;\r\n        setField(fieldsValues);\r\n        if (readFormStateRef.current.isValid && validateSchemaIsValid) {\r\n            validateSchemaIsValid({\r\n                [name]: fieldsValues,\r\n            });\r\n        }\r\n    };\r\n    const resetFields = (flagOrFields) => {\r\n        if (readFormStateRef.current.dirty) {\r\n            isDirtyRef.current = isUndefined(flagOrFields)\r\n                ? true\r\n                : getIsFieldsDifferent(flagOrFields, memoizedDefaultValues.current);\r\n        }\r\n        for (const key in fieldsRef.current) {\r\n            if (isMatchFieldArrayName(key, name) && fieldsRef.current[key]) {\r\n                removeFieldEventListener(fieldsRef.current[key], true);\r\n            }\r\n        }\r\n    };\r\n    const mapCurrentFieldsValueWithState = () => {\r\n        const currentFieldsValue = getValues({ nest: true })[name];\r\n        if (isArray(currentFieldsValue)) {\r\n            for (let i = 0; i < currentFieldsValue.length; i++) {\r\n                fields[i] = Object.assign(Object.assign({}, fields[i]), currentFieldsValue[i]);\r\n            }\r\n        }\r\n    };\r\n    const append = (value) => {\r\n        mapCurrentFieldsValueWithState();\r\n        if (readFormStateRef.current.dirty) {\r\n            isDirtyRef.current = true;\r\n        }\r\n        commonTasks([\r\n            ...fields,\r\n            ...(isArray(value)\r\n                ? appendValueWithKey(value)\r\n                : [appendId(value, keyName)]),\r\n        ]);\r\n    };\r\n    const prepend = (value) => {\r\n        mapCurrentFieldsValueWithState();\r\n        resetFields();\r\n        commonTasks(prependAt(fields, isArray(value) ? appendValueWithKey(value) : [appendId(value, keyName)]));\r\n        if (errorsRef.current[name]) {\r\n            errorsRef.current[name] = prependAt(errorsRef.current[name], fillEmptyArray(value));\r\n        }\r\n        if (readFormStateRef.current.touched && touchedFieldsRef.current[name]) {\r\n            touchedFieldsRef.current[name] = prependAt(touchedFieldsRef.current[name], fillEmptyArray(value));\r\n        }\r\n    };\r\n    const remove = (index) => {\r\n        if (!isUndefined(index)) {\r\n            mapCurrentFieldsValueWithState();\r\n        }\r\n        resetFields(removeArrayAt(getFieldValueByName(fieldsRef.current, name), index));\r\n        commonTasks(removeArrayAt(fields, index));\r\n        if (errorsRef.current[name]) {\r\n            errorsRef.current[name] = removeArrayAt(errorsRef.current[name], index);\r\n        }\r\n        if (readFormStateRef.current.touched && touchedFieldsRef.current[name]) {\r\n            touchedFieldsRef.current[name] = removeArrayAt(touchedFieldsRef.current[name], index);\r\n        }\r\n        if (readFormStateRef.current.isValid && !validateSchemaIsValid) {\r\n            fields.forEach((field, fieldIndex) => {\r\n                if (isUndefined(index) ||\r\n                    fieldIndex === index ||\r\n                    (isArray(index) && index.indexOf(fieldIndex) >= 0)) {\r\n                    for (const key in field) {\r\n                        const removeFieldName = `${name}[${index}].${key}`;\r\n                        validFieldsRef.current.delete(removeFieldName);\r\n                        fieldsWithValidationRef.current.delete(removeFieldName);\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    };\r\n    const insert = (index, value) => {\r\n        mapCurrentFieldsValueWithState();\r\n        resetFields(insertAt(getFieldValueByName(fieldsRef.current, name), index));\r\n        commonTasks(insertAt(fields, index, isArray(value) ? appendValueWithKey(value) : [appendId(value, keyName)]));\r\n        if (errorsRef.current[name]) {\r\n            errorsRef.current[name] = insertAt(errorsRef.current[name], index, fillEmptyArray(value));\r\n        }\r\n        if (readFormStateRef.current.touched && touchedFieldsRef.current[name]) {\r\n            touchedFieldsRef.current[name] = insertAt(touchedFieldsRef.current[name], index, fillEmptyArray(value));\r\n        }\r\n    };\r\n    const swap = (indexA, indexB) => {\r\n        mapCurrentFieldsValueWithState();\r\n        const fieldValues = getFieldValueByName(fieldsRef.current, name);\r\n        swapArrayAt(fieldValues, indexA, indexB);\r\n        resetFields(fieldValues);\r\n        swapArrayAt(fields, indexA, indexB);\r\n        commonTasks([...fields]);\r\n        if (errorsRef.current[name]) {\r\n            swapArrayAt(errorsRef.current[name], indexA, indexB);\r\n        }\r\n        if (readFormStateRef.current.touched && touchedFieldsRef.current[name]) {\r\n            swapArrayAt(touchedFieldsRef.current[name], indexA, indexB);\r\n        }\r\n    };\r\n    const move = (from, to) => {\r\n        mapCurrentFieldsValueWithState();\r\n        const fieldValues = getFieldValueByName(fieldsRef.current, name);\r\n        moveArrayAt(fieldValues, from, to);\r\n        resetFields(fieldValues);\r\n        moveArrayAt(fields, from, to);\r\n        commonTasks([...fields]);\r\n        if (errorsRef.current[name]) {\r\n            moveArrayAt(errorsRef.current[name], from, to);\r\n        }\r\n        if (readFormStateRef.current.touched && touchedFieldsRef.current[name]) {\r\n            moveArrayAt(touchedFieldsRef.current[name], from, to);\r\n        }\r\n    };\r\n    const reset = () => {\r\n        resetFields();\r\n        memoizedDefaultValues.current = get(defaultValuesRef.current, name, []);\r\n        setField(mapIds(memoizedDefaultValues.current, keyName));\r\n    };\r\n    useEffect$1(() => {\r\n        const resetFunctions = resetFieldArrayFunctionRef.current;\r\n        const fieldArrayNames = fieldArrayNamesRef.current;\r\n        fieldArrayNames.add(name);\r\n        resetFunctions[name] = reset;\r\n        watchFieldArrayRef.current[name] = {};\r\n        return () => {\r\n            resetFields();\r\n            delete resetFunctions[name];\r\n            fieldArrayNames.delete(name);\r\n        };\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n    return {\r\n        swap,\r\n        move,\r\n        prepend,\r\n        append,\r\n        remove,\r\n        insert,\r\n        fields,\r\n    };\r\n};\n\nvar getInputValue = (target, isCheckbox) => {\r\n    if (isNullOrUndefined(target)) {\r\n        return target;\r\n    }\r\n    return isCheckbox\r\n        ? isUndefined(target.checked)\r\n            ? target\r\n            : target.checked\r\n        : isUndefined(target.value)\r\n            ? target\r\n            : target.value;\r\n};\n\nconst Controller = (_a) => {\r\n    var { name, rules, as: InnerComponent, onBlur, onChange, onChangeName = VALIDATION_MODE.onChange, onBlurName = VALIDATION_MODE.onBlur, valueName, defaultValue, control } = _a, rest = __rest(_a, [\"name\", \"rules\", \"as\", \"onBlur\", \"onChange\", \"onChangeName\", \"onBlurName\", \"valueName\", \"defaultValue\", \"control\"]);\r\n    const methods = useFormContext();\r\n    const { defaultValuesRef, setValue, register, unregister, errorsRef, removeFieldEventListener, triggerValidation, mode: { isOnSubmit, isOnBlur }, reValidateMode: { isReValidateOnBlur, isReValidateOnSubmit }, formState: { isSubmitted }, fieldsRef, fieldArrayNamesRef, } = control || methods.control;\r\n    const [value, setInputStateValue] = useState$2(isUndefined(defaultValue)\r\n        ? get(defaultValuesRef.current, name)\r\n        : defaultValue);\r\n    const valueRef = useRef$2(value);\r\n    const isCheckboxInput = isBoolean(value);\r\n    const shouldValidate = () => !skipValidation({\r\n        hasError: !!get(errorsRef.current, name),\r\n        isOnBlur,\r\n        isOnSubmit,\r\n        isReValidateOnBlur,\r\n        isReValidateOnSubmit,\r\n        isSubmitted,\r\n    });\r\n    const commonTask = (target) => {\r\n        const data = getInputValue(target, isCheckboxInput);\r\n        setInputStateValue(data);\r\n        valueRef.current = data;\r\n        return data;\r\n    };\r\n    const eventWrapper = (event) => (...arg) => setValue(name, commonTask(event(arg)), shouldValidate());\r\n    const handleChange = (e) => {\r\n        const data = commonTask(e && e.target ? e.target : e);\r\n        setValue(name, data, shouldValidate());\r\n    };\r\n    const registerField = () => {\r\n        if (isNameInFieldArray(fieldArrayNamesRef.current, name) &&\r\n            fieldsRef.current[name]) {\r\n            removeFieldEventListener(fieldsRef.current[name], true);\r\n        }\r\n        register(Object.defineProperty({ name }, VALUE, {\r\n            set(data) {\r\n                setInputStateValue(data);\r\n                valueRef.current = data;\r\n            },\r\n            get() {\r\n                return valueRef.current;\r\n            },\r\n        }), Object.assign({}, rules));\r\n    };\r\n    if (!fieldsRef.current[name]) {\r\n        registerField();\r\n        setInputStateValue(isUndefined(defaultValue)\r\n            ? get(defaultValuesRef.current, name)\r\n            : defaultValue);\r\n    }\r\n    useEffect$2(() => {\r\n        registerField();\r\n        return () => {\r\n            if (!isNameInFieldArray(fieldArrayNamesRef.current, name)) {\r\n                unregister(name);\r\n            }\r\n        };\r\n    }, [name]);\r\n    const shouldReValidateOnBlur = isOnBlur || isReValidateOnBlur;\r\n    const props = Object.assign(Object.assign(Object.assign(Object.assign({ name }, rest), (onChange\r\n        ? { [onChangeName]: eventWrapper(onChange) }\r\n        : { [onChangeName]: handleChange })), (onBlur || shouldReValidateOnBlur\r\n        ? {\r\n            [onBlurName]: (...args) => {\r\n                if (onBlur) {\r\n                    onBlur(args);\r\n                }\r\n                if (shouldReValidateOnBlur) {\r\n                    triggerValidation(name);\r\n                }\r\n            },\r\n        }\r\n        : {})), { [valueName || (isCheckboxInput ? 'checked' : VALUE)]: value });\r\n    return isValidElement(InnerComponent) ? (cloneElement(InnerComponent, props)) : (createElement(InnerComponent, Object.assign({}, props)));\r\n};\n\nconst ErrorMessage = (_a) => {\r\n    var { as: InnerComponent, errors, name, message, children } = _a, rest = __rest(_a, [\"as\", \"errors\", \"name\", \"message\", \"children\"]);\r\n    const methods = useFormContext();\r\n    const error = get(errors || methods.errors, name);\r\n    if (!error) {\r\n        return null;\r\n    }\r\n    const { message: messageFromRegister, types } = error;\r\n    const props = Object.assign(Object.assign({}, (InnerComponent ? rest : {})), { children: children\r\n            ? children({ message: messageFromRegister || message, messages: types })\r\n            : messageFromRegister || message });\r\n    return InnerComponent ? (isValidElement(InnerComponent) ? (cloneElement(InnerComponent, props)) : (createElement(InnerComponent, props))) : (createElement(Fragment, Object.assign({}, props)));\r\n};\n\nexport { Controller, ErrorMessage, FormContext, useFieldArray, useForm, useFormContext };\n"],"sourceRoot":""}